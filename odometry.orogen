name "odometry"
version '0.1'

import_types_from 'base'
using_library "odometry"
using_library "envire"

import_types_from 'odometry/Configuration.hpp'
import_types_from 'odometry/ContactState.hpp'
import_types_from 'odometry/BodyState.hpp'

typekit.export_types '/odometry/Configuration', '/odometry/BodyContactState'

task_context 'Generic' do
    abstract
    needs_configuration

    ##########################
    # configuration parameters 
    ##########################

    property('odometry_config', '/odometry/Configuration').
	doc 'configuration struct for the asguard odometry class'

    property('body_frame', '/std/string', 'body').
        doc "the frame name for the body frame"

    property('odometry_frame', '/std/string', 'odometry').
        doc "the frame name for the odometry frame"

    property('start_pose', '/base/samples/RigidBodyState').
        dynamic.
        doc "starting position for odometry"

    ##########################
    # i/o ports 
    ##########################

    output_port('odometry_samples', '/base/samples/RigidBodyState').
	doc 'timestamped absolute odometry given in an arbitrary fixed frame'

    output_port('odometry_delta_samples', '/base/samples/RigidBodyState').
	doc 'timestamped odometry sample given as relative transformation since the last orientation sample. The transformation is from the current body frame to the previous frame.'

end

task_context 'Skid4OdometryTask' do
    doc "normal skid-steering odometry"
    subclasses "Generic"

    ##########################
    # configuration parameters 
    ##########################

    property('wheelRadiusAvg', 'double').
	doc 'wheel radius avarage'

    property('trackWidth', 'double').
	doc 'track width'

    property('wheelBase', 'double').
        doc 'wheel base'

    ##########################
    # i/o ports 
    ##########################

    input_port('actuator_samples', '/base/actuators/Status').
        needs_reliable_connection.
	doc 'timestamped motor state samples providing odometry information.'
   
    output_port('bodystate_samples', '/odometry/BodyState').
	doc 'timestamped robot bodystate information'

    ##########################
    # aggregator parameters
    ##########################

    transformer() do
	transformation("body", "imu_enu")

	align_port("actuator_samples", 0.001)
	max_latency(0.1)
    end
    port_driven 'dynamic_transformations'
end

task_context 'Skid' do
    doc "normal skid-steering odometry for any number of skid steering wheels"
    subclasses "Generic"

    ##########################
    # configuration parameters 
    ##########################

    property('trackWidth', 'double').
	doc 'track width'

    property('wheelBase', 'double').
	doc 'wheel base'

    property('leftWheelNames', 'std/vector<std/string>').
	doc 'wheel base'

    property('rightWheelNames', 'std/vector<std/string>').
	doc 'wheel base'
	
    property('usePosition', 'bool').
        doc 'If this value is set to true, the position field of the actuator samples will be used to calculate the translation'


    ##########################
    # i/o ports 
    ##########################

    input_port('actuator_samples', '/base/samples/Joints').
        needs_reliable_connection.
	doc 'timestamped motor state samples providing odometry information.'

    input_port('orientation_samples', '/base/samples/RigidBodyState').
        needs_reliable_connection.
        doc 'provides timestamped orientation samples.'

    ##########################
    # aggregator parameters
    ##########################

    transformer() do
	align_port("actuator_samples", 0.01)
	align_port("orientation_samples", 0.01)
	max_latency(0.1)
    end
    port_driven
end

task_context 'ContactPointTask' do
    doc "contact-point odometry"
    subclasses "Generic"

    ##########################
    # i/o ports 
    ##########################

    input_port('contact_samples', '/odometry/BodyContactState').
        needs_reliable_connection.
        doc 'samples providing information on the contact of the body with the environment'

    input_port('orientation_samples', '/base/samples/RigidBodyState').
        needs_reliable_connection.
        doc 'provides timestamped orientation samples.'

    ##########################
    # aggregator parameters
    ##########################

    transformer() do
        transform "imu", "body" # imu in body in "Source in target" convention (Tbody_imu in frames convention)
        align_port("contact_samples", 0.01)
        align_port("orientation_samples", 0.01)
        max_latency(0.1)
    end

    port_driven
end

